#!/usr/bin/env python
#
# Copyright (C) 2014 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
sys.path.insert(0, "build/tools/releasetools/")

if sys.hexversion < 0x02070000:
  print >> sys.stderr, "Python 2.7 or newer is required."
  sys.exit(1)

import os
import common
import re

OPTIONS = common.OPTIONS

def MakeRecoveryPatch(input_dir, output_sink, recovery_img, boot_img,
                      info_dict=None):
  """Generate a binary patch that creates the recovery image starting
  with the boot image.  (Most of the space in these images is just the
  kernel, which is identical for the two, so the resulting patch
  should be efficient.)  Add it to the output zip, along with a shell
  script that is run from init.rc on first boot to actually do the
  patching and install the new recovery image.

  recovery_img and boot_img should be File objects for the
  corresponding images.  info should be the dictionary returned by
  common.LoadInfoDict() on the input target_files.
  """

  if info_dict is None:
    info_dict = OPTIONS.info_dict

  diff_program = ["imgdiff"]
  path = os.path.join(input_dir, "SYSTEM", "etc", "recovery-resource.dat")
  if os.path.exists(path):
    diff_program.append("-b")
    diff_program.append(path)
    bonus_args = "-b /system/etc/recovery-resource.dat"
  else:
    bonus_args = ""

  d = common.Difference(recovery_img, boot_img, diff_program=diff_program)
  _, _, patch = d.ComputePatch()
  output_sink("recovery-from-boot.p", patch)

  boot_device = "/cust/image/boot.img"
  recovery_device = "/cust/image/recovery.img"

  sh = """#!/system/bin/sh
if [ -f /system/etc/recovery-transform.sh ]; then
  exec sh /system/etc/recovery-transform.sh %(recovery_size)d %(recovery_sha1)s %(boot_size)d %(boot_sha1)s
fi

if ! applypatch -c %(recovery_device)s %(recovery_sha1)s; then
  mount -o rw,remount /cust
  applypatch %(bonus_args)s %(boot_device)s %(recovery_device)s %(recovery_sha1)s %(recovery_size)d %(boot_sha1)s:/system/recovery-from-boot.p && log -t recovery "Installing new recovery image: succeeded" || log -t recovery "Installing new recovery image: failed"
  mount -o ro,remount /cust
else
  log -t recovery "Recovery image already installed"
fi
""" % { 'boot_size': boot_img.size,
        'boot_sha1': boot_img.sha1,
        'recovery_size': recovery_img.size,
        'recovery_sha1': recovery_img.sha1,
        'boot_device': boot_device,
        'recovery_device': recovery_device,
        'bonus_args': bonus_args,
        }

  # The install script location moved from /system/etc to /system/bin
  # in the L release.  Parse the init.rc file to find out where the
  # target-files expects it to be, and put it there.
  sh_location = "etc/install-recovery.sh"
  try:
    with open(os.path.join(input_dir, "BOOT", "RAMDISK", "init.rc")) as f:
      for line in f:
        m = re.match("^service flash_recovery /system/(\S+)\s*$", line)
        if m:
          sh_location = m.group(1)
          print "putting script in", sh_location
          break
  except (OSError, IOError), e:
    print "failed to read init.rc: %s" % (e,)

  output_sink(sh_location, sh)

def main(argv):
  # def option_handler(o, a):
  #   return False

  args = common.ParseOptions(argv, __doc__)
  input_dir, output_dir = args

  OPTIONS.info_dict = common.LoadInfoDict(input_dir)

  recovery_img = common.GetBootableImage("recovery.img", "recovery.img",
                                         input_dir, "RECOVERY")
  boot_img = common.GetBootableImage("boot.img", "boot.img",
                                     input_dir, "BOOT")

  if not recovery_img or not boot_img:
    sys.exit(0)

  def output_sink(fn, data):
    with open(os.path.join(output_dir, "SYSTEM", *fn.split("/")), "wb") as f:
      f.write(data)

  MakeRecoveryPatch(input_dir, output_sink, recovery_img, boot_img, OPTIONS.info_dict)


if __name__ == '__main__':
  main(sys.argv[1:])
